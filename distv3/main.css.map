{"version":3,"sources":["webpack:///src/pages/Home.vue","webpack:///src/components/comp1.vue"],"names":[],"mappings":";AAiDA;EACE,WAAY;EACZ,gBAAa;EACb,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;;AClBA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,mBAAgB;AAClB;AACA;EACE,WAAY;EACZ,gBAAa;EACb,iBAAc;EACd,cAAe;AACjB","file":"main.css","sourcesContent":["<template>\r\n  <div>\r\n    <div>I am in Home page</div>\r\n    <div class=\"flexBox\">\r\n      <span>ref:{{ count }}</span>\r\n      <span>reactive:{{ reactiveField }}</span>\r\n      <span>{{ objA }}</span>\r\n    </div>\r\n    <div class=\"flexBox\">\r\n      <button @click=\"addRef\">addRef</button>\r\n      <button @click=\"addReactive\">addReactive</button>\r\n      <button @click=\"addobjA\">addobjA</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//ref 由传入值返回一个响应式的、可变的且只有value一个属性的ref对象 （简单数据）\r\n//  string 和 number 是只有值，没有引用的  故vue无论defineProperty proxy均无法实时监听  所以必须包装对象ref(3) data(2)\r\n// reactive   reactive的作用是将对象包装成响应式对象——通过 Proxy代理后的对象。set forceUpdate滚出\r\nimport { ref, reactive, toRefs } from 'vue'\r\nexport default {\r\n  setup() {\r\n    const count = ref(0)\r\n    const state = reactive({\r\n      reactiveField: 0,\r\n      objA: ['a', 'b', 'c'],\r\n    })\r\n    const addRef = () => {\r\n      count.value++\r\n    }\r\n    const addReactive = () => {\r\n      state.reactiveField++\r\n    }\r\n    const addobjA = () => {\r\n      state.objA[0] = 'x'\r\n    }\r\n    return {\r\n      count,\r\n      ...toRefs(state),\r\n      addRef,\r\n      addReactive,\r\n      addobjA,\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.flexBox {\r\n  width: 600px;\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"ccinps\">\r\n    <div>I am child components</div>\r\n    <div>{{data1_c.data1}}<span @click=\"changeIt()\"> let change obj !</span></div>\r\n    <input class=\"ccinp\" type=\"text\" placeholder=\"i am in comp1\" v-model=\"data2_c\"/>\r\n    <div @click=\"ftk\">let father talk</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, toRefs,inject } from 'vue'\r\nexport default {\r\n  setup(props, context) {   \r\n    const data1_c = inject('data1_c')\r\n    const data2_c = inject('data2_c')\r\n    const changeIt=()=>{\r\n      data1_c.data1.a=='ss'?data1_c.data1.a='xx':data1_c.data1.a='ss'\r\n    }\r\n    const ftk=()=>{\r\n      console.log('contxt-c',context)\r\n      context.emit('FatherTalk')\r\n    }\r\n    const alr=()=>{\r\n      alert('i am child')\r\n    }\r\n    return {\r\n      data1_c,\r\n      data2_c,\r\n      alr,\r\n      ftk,\r\n      changeIt\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.ccinps {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 50px;\r\n}\r\n.ccinp {\r\n  width: 600px;\r\n  height: 100px;\r\n  margin: 10px 0;\r\n  font-size: 30px;\r\n}\r\n</style>\r\n"],"sourceRoot":""}