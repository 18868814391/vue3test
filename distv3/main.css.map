{"version":3,"sources":["webpack:///src/pages/Home.vue"],"names":[],"mappings":";AAkFA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC","file":"main.css","sourcesContent":["<template>\r\n  <div>\r\n    <div>I am in Home page</div>\r\n    <div class=\"flexBox\">\r\n      <text>ref:{{ count }}</text>\r\n      <text>reactive:{{ reactiveField }}</text>\r\n      <text>reactiveA:{{ a[0].a.a }}</text>\r\n      <text>dataA:{{ dataA }}</text>\r\n      <text>{{ objA}}</text>\r\n    </div>\r\n    <div class=\"flexBox\">\r\n      <button @click=\"addRef\">addRef</button>\r\n      <button @click=\"addReactive\">addReactive</button>\r\n      <button @click=\"addA\">addA</button>\r\n      <button @click=\"addDataA\">addDataA</button>\r\n      <button @click=\"addobjA\">addobjA</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//ref 由传入值返回一个响应式的、可变的且只有value一个属性的ref对象 （简单数据）\r\n//  string 和 number 是只有值，没有引用的  故vue无论defineProperty proxy均无法实时监听  所以必须包装对象ref(3) data(2)\r\n// reactive   reactive的作用是将对象包装成响应式对象——通过 Proxy代理后的对象。set forceUpdate滚出\r\nimport { ref, reactive, toRefs, provide, inject } from 'vue'\r\n\r\nexport default {\r\n  setup() {\r\n    //生命周期  在beforeCreate之后  created之前  没有this  只能调用一次\r\n    const count = ref(0)\r\n    const state = reactive({\r\n      reactiveField: 0,\r\n      a: [\r\n        {\r\n          a: {\r\n            a: 1,\r\n          },\r\n        },\r\n      ],\r\n    })\r\n    const addRef = () => {\r\n      count.value++\r\n    }\r\n    const addReactive = () => {\r\n      state.reactiveField++\r\n    }\r\n    const addA = () => {\r\n      state.a[0].a.a++\r\n    }\r\n    return {\r\n      count,\r\n      ...toRefs(state),\r\n      addA,\r\n      addRef,\r\n      addReactive,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      dataA: 0,\r\n      objA: ['a', 'b', 'c'],\r\n    }\r\n  },\r\n  created() {},\r\n  methods: {\r\n    // addRef() {\r\n    //   this.count++\r\n    // },\r\n    // addA() {\r\n    //   this.a[0].a.a++\r\n    // },\r\n    addDataA() {\r\n      this.dataA++\r\n    },\r\n    addobjA() {\r\n      this.objA[0] = 'x'\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.flexBox {\r\n  width: 750px;\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n</style>\r\n"],"sourceRoot":""}